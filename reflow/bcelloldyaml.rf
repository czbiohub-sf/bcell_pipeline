/* Reflow workflow for B-cell repertoire sequencing pipeline. Follows Immcantation framework.
   Used for single runs in the reflow/ directory. For batch runs, use bcell_batch.rf from 
   experiments/bcell_initial_runs/.

   author: Gerry Meixiong, CZ Biohub
   date: 7.12.18
 */

/* Input: read1_file and read2_file are read sequencing files in fastq format.
   Results will be saved to the s3 bucket results_bucket under the run_name 
   directory. */
param (
	read1_file string
	read2_file string
	read1_primers string
	read2_primers string
	yaml string
	run_name string
	results_bucket string
)

val dirs = make("$/dirs")
val strings = make("$/strings")

/**************************** RAW READ PROCESSING *****************************/


// Step 1. Presto.
val presto = make("prestooldyaml.rf")
val presto_res = presto.PrestoRun(file(read1_file), file(read2_file), 
	file(read1_primers), file(read2_primers), yaml, run_name)
val presto_bucket = dirs.Copy(presto_res,
	strings.Join([results_bucket, run_name, "presto"], "/"))

// [Optional] SplitSeq.
// val split_seq = presto_bucket ~> make("split_seq.rf")
// val (split_seq_fastq, _) = dirs.Pick(presto_res, "*unique_atleast-2.fastq")
// val split_seq_res = split_seq.SplitSeq(split_seq_fastq)
// val split_seq_bucket = dirs.Copy(split_seq_res,
// 	strings.Join([results_bucket, run_name, "splitSeq"], "/"))


/************************** V(D)J ANNOTATION/ALIGNMENT ************************/



// RUn change o on both full dataset and reads that contain special sequences (gotten from bowtie2?)

// Step 2. Change-O + IgBLAST.
val changeo_igblast = presto_bucket ~> make("changeo_igblast.rf")
val (changeo_fastq, _) = dirs.Pick(presto_res, "*atleast-2_primers-pass.fastq")
val changeo_igblast_res = changeo_igblast.ChangeoRun(changeo_fastq, run_name)
val changeo_igblast_bucket = dirs.Copy(changeo_igblast_res,
	strings.Join([results_bucket, run_name, "changeo_igblast"], "/"))

// Step 3a. TIgGER.
val tigger = changeo_igblast_bucket ~> make("tigger.rf")
val (tigger_tsv, _) = dirs.Pick(changeo_igblast_res, "*parse-select.tab")
val tigger_res = tigger.TiggerRun(tigger_tsv, run_name)
val tigger_bucket = dirs.Copy(tigger_res,
	strings.Join([results_bucket, run_name, "tigger"], "/"))

// Step 3b. SHazaM Clonal Assignment Threshold Tuning.
val shazam = tigger_bucket ~> make("shazam.rf")
val (shazam_tsv, _) = dirs.Pick(tigger_res, "*genotyped.tab")
val shazam_res = shazam.ShazamRun(shazam_tsv, run_name)
val shazam_bucket = dirs.Copy(shazam_res,
	strings.Join([results_bucket, run_name, "shazam"], "/"))

// Step 4. Change-O Clonal Assignment.
val changeo_clone = shazam_bucket ~> make("changeo_clone.rf")
val (changeo_tsv, _) = dirs.Pick(shazam_res, "*threshold-values.tab")
val changeo_clone_res = changeo_clone.ChangeoRun(shazam_tsv, changeo_tsv, run_name)
val changeo_clone_bucket = dirs.Copy(changeo_clone_res,
	strings.Join([results_bucket, run_name, "changeo_clone"], "/"))

// Analysis Step.
// Construct Gene and Gene Family Plots.
// TODO: Read Clone number and run Lineage Reconstruction for a given clone.
val alakazam = changeo_clone_bucket ~> make("alakazam.rf")
val (alakazam_tsv, _) = dirs.Pick(changeo_clone_res, "*germ-pass.tab")
val alakazam_res = alakazam.AlakazamRun(alakazam_tsv)
val alakazam_bucket = dirs.Copy(alakazam_res,
	strings.Join([results_bucket, run_name, "alakazam"], "/"))

@requires(cpu := 8, mem := 96*GiB, disk := 800*GiB)
val Main = alakazam_bucket
