/* Reflow workflow for B-cell repertoire sequencing pipeline. Developed at Chan
   Zuckerberg Biohub. Follows Immcantation framework. */

/* Input: read1_file and read2_file are read sequencing files in fastq format.
   name gives a name to the current run that files will be saved under.
   results_bucket refers to an s3 bucket that files will be saved under. */
param (
	read1_file string
	read2_file string
	read1_primers string
	read2_primers string
	name string
	results_bucket string
	author = "CZ Biohub"
	description = "Initial MiSeq run"
	min_conscount = 2
	d_threshold = 0.15
)

val dirs = make("$/dirs")
val strings = make("$/strings")

/**************************** RAW READ PROCESSING *****************************/

// Step 1a. Presto.
val presto = make("../../reflow/presto.rf")
val yaml = presto.CreateYaml(read1_file, name, author, description)
val presto_res = presto.PrestoRun(file(read1_file), file(read2_file), 
	file(read1_primers), file(read2_primers), yaml, name)
val presto_bucket = dirs.Copy(presto_res,
	strings.Join([results_bucket, name, "presto"], "/"))

// Step 1b. SplitSeq.
// val split_seq = presto_bucket ~> make("../../reflow/split_seq.rf")
// val (split_seq_fastq, _) = dirs.Pick(presto_res, "*unique_atleast-2.fastq")
// val split_seq_res = split_seq.SplitSeq(split_seq_fastq, min_conscount)
// val split_seq_bucket = dirs.Copy(split_seq_res,
// 	strings.Join([results_bucket, name, "splitSeq"], "/"))

/************************** V(D)J ANNOTATION/ALIGNMENT ************************/

// Step 2. Change-O + IgBLAST.
val changeo_igblast = presto_bucket ~> make("../../reflow/changeo_igblast.rf")
val (changeo_fastq, _) = dirs.Pick(presto_res, "*atleast-2.fastq")
val changeo_igblast_res = changeo_igblast.ChangeoRun(changeo_fastq, name)
val changeo_igblast_bucket = dirs.Copy(changeo_igblast_res,
	strings.Join([results_bucket, name, "changeo_igblast"], "/"))

// Step 3. TIgGER.
val tigger = changeo_igblast_bucket ~> make("../../reflow/tigger.rf")
val (tigger_tab, _) = dirs.Pick(changeo_igblast_res, "*parse-select.tab")
val tigger_res = tigger.TiggerRun(tigger_tab, name)
val tigger_bucket = dirs.Copy(tigger_res,
	strings.Join([results_bucket, name, "tigger"], "/"))

// Optional. SHazaM Clonal Assignment Threshold Tuning.
val shazam = tigger_bucket ~> make("../../reflow/shazam.rf")
val (gen_tab, _) = dirs.Pick(tigger_res, "*genotyped.tab")
val shazam_res = shazam.ShazamRun(gen_tab, name)
val shazam_bucket = dirs.Copy(shazam_res,
	strings.Join([results_bucket, name, "shazam"], "/"))

// Step 4. Change-O Clonal Assignment.
val changeo_clone = shazam_bucket ~> make("../../reflow/changeo_clone.rf")
val changeo_clone_res = changeo_clone.ChangeoRun(gen_tab, d_threshold, name)
val changeo_clone_bucket = dirs.Copy(changeo_clone_res,
	strings.Join([results_bucket, name, "changeo_clone"], "/"))

/********************************** ANALYSIS **********************************/


@requires(cpu := 8, mem := 32*GiB, disk := 200*GiB)
val Main = changeo_clone_bucket

