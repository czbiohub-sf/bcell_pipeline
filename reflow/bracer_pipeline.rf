// TAKING LINCOLN'S TRACER PIPELINE AND MODIFYING FOR BRACER...

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// script: tracer_pipeline.rf
// author: Lincoln Harris
// date: 10.11.18
// 
// Can I implement my existing TCR assembly pipeline in reflow? 
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

// command line params
param (
	// cell ID
	sample_id string
	// s3 path to fastq file r1
	input_fq1 string
	// s3 path to fastq file r2
	input_fq2 string
	// s3 path to output dir
	output_dir string
	// how many threads to execute Bracer assemble with
	threads = 12
)

// Declare GLOBAL variables
val bracer_docker_image = "teichlab/bracer"
// val gatk = "broadinstitute/gatk" // hoping this guy has gunzip
// Initiate the system modules "files" (system modules begin
// with $), assigning its instance to the "files" identifier.
val files = make("$/files")
// Instantiate Go system module "strings"
val strings = make("$/strings")
val dirs = make("$/dirs")

// Unzip()
//		gunzip the the gzipped fastqs
// func Unzip(gzipped file) = 
// 	exec(image := gatk, cpu := 8, mem := 16*GiB) (output file) {"
// 		gunzip -c {{gzipped}} > {{output}}
// 	"}

// Assemble()
//		Run Bracer assemble
// make sure read1.fq and read2.fq below don't require an unzipped fastq
func Assemble(sample_id string, fq1 file, fq2 file) dir = {

	d := dirs.Make(["read1.fq": fq1, "read2.fq": fq2])

	exec(image := bracer_docker_image, cpu := threads, mem := GiB) (out_dir dir) {"

		export IGDATA=/ncbi-igblast-1.7.0/bin
		cp /bracer/docker_helper_files/docker_bracer.conf ~/.bracerrc

		bracer assemble --ncores {{threads}} --species Hsap {{sample_id}} {{out_dir}} {{d}}/read1.fq {{d}}/read2.fq
	"}

}

val fq1 = file(input_fq1) // initialized as a string, need to convert to file
val fq2 = file(input_fq2) // initialized as a string, need to convert to file

// fq1_unzipped := Unzip(fq1)
// fq2_unzipped := Unzip(fq2)
assembled_dir := Assemble(sample_id, fq1, fq2)

// Main()
@requires(cpu := 8, mem := 96*GiB, disk := 800*GiB)
val Main = dirs.Copy(assembled_dir, output_dir)
